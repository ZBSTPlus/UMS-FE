/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/w9gsS6YM8gD
 */

import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';

const data = [
  {
    id: 1,
    question: '20+6=?',
    options: ['26', '20', '24', '28'],
    correctAnswer: '26',
  },
  {
    id: 2,
    question: '2+2=?',
    options: ['1', '2', '4', '3'],
    correctAnswer: '4',
  },
  {
    id: 3,
    question: '14/7 =?',
    options: ['5', '2', '4', '3'],
    correctAnswer: '2',
  },
  // Add more questions as needed
  {
    id:4,
    question: '20*2',
    options:['40','30', '10', '0'],
    correctAnswer: '40',
  },
  {
    id:5,
    question:'0-1',
    options: ['2','-1','0','-2'],
    correctAnswer: '-1',
  },
];


export default function Quizpage() {
  const [questionIndex, setQuestionIndex] = useState(0);
  const [selectedOptions, setSelectedOptions] = useState(Array(data.length).fill(null));
  const [answerSubmitted, setAnswerSubmitted] = useState(false);
  const [isCorrectAnswers, setIsCorrectAnswers] = useState(Array(data.length).fill(false));
  const [score, setScore] = useState(0);
  const [timeLeft, setTimeLeft] = useState(data.length*60); // 5 minutes in seconds

  useEffect(() => {
    const timer = setInterval(() => {
      setTimeLeft((prevTime) => {
        if (prevTime > 0) {
          return prevTime - 1;
        } else {
          // Time is up, handle logic here (e.g., show quiz completed screen)
          clearInterval(timer);
          handleTimeUp();
          return 0;
        }
      });
    }, 1000);

    // Clean up the interval when the component unmounts or the quiz is completed
    return () => clearInterval(timer);
  }, [questionIndex, timeLeft]);

  // useEffect(() => {
  //   // Adjust the time limit whenever a new question is added
  //   setTimeLeft(60); // Reset time limit to 1 minute for each new question
  // }, [questionIndex]);
  

  const handleTimeUp = () => {
    // Handle logic when time is up (e.g., show quiz completed screen)
    setQuestionIndex(data.length);
  };

  const question = data[questionIndex];

  const handleOptionChange = (option) => {
    const newSelectedOptions = [...selectedOptions];
    newSelectedOptions[questionIndex] = option;
    setSelectedOptions(newSelectedOptions);
  };

  const handleSubmitAnswer = () => {
    if (selectedOptions[questionIndex] !== null) {
      // Logic to handle the submitted answer for the current question
      const isCorrect = selectedOptions[questionIndex] === question.correctAnswer;
      console.log(`Selected Option: ${selectedOptions[questionIndex]}, Correct Answer: ${question.correctAnswer}, Correct: ${isCorrect}`);

      // Update isCorrectAnswers for the current question
      const newIsCorrectAnswers = [...isCorrectAnswers];
      newIsCorrectAnswers[questionIndex] = isCorrect;
      setIsCorrectAnswers(newIsCorrectAnswers);

       // Update the score
       setScore((prevScore) => (isCorrect ? prevScore + 1 : prevScore));

      // Move to the next question
      setQuestionIndex((prevIndex) => prevIndex + 1);
      // Reset answerSubmitted for the new question
      setAnswerSubmitted(false);
    } else {
      // Display an error or notification for the user to choose an option
      console.log('Please choose an option before submitting.');
    }
  };

    // Check if all questions are answered
    const allQuestionsAnswered = selectedOptions.every((option) => option !== null);

  // const handleNextQuestion = () => {
  //   // Logic to move to the next question
  //   // Reset setAnswerSubmitted and setIsCorrectAnswer for the new question
  //   setAnswerSubmitted(false);
  //   setIsCorrectAnswer(false);

  //   // Check if the current answer is correct before enabling the next question
    
  //   setQuestionIndex((prevIndex) => (prevIndex + 1) % data.length);
  //   // Reset selected option for the new question
  //   setSelectedOption(null);
    
  // };
  // const handleReset = () => {
  //   // Reset selected option and question
  //   setSelectedOption(null);
  //   setAnswerSubmitted(false);
  //   setIsCorrectAnswer(false);
  // };

  return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-gray-100 dark:bg-gray-900">
      <div className="w-[50%] p-4 space-y-4">
        {questionIndex < data.length ? (
          <div className="flex flex-col p-6 bg-white rounded-lg shadow-md dark:bg-gray-800">
            <h1 className="mb-4 text-2xl font-bold text-center text-gray-700 dark:text-white">QUIZ</h1>
            <p className="text-right text-gray-600">
            Time Left: {Math.floor(timeLeft / 60)}:{(timeLeft % 60).toString().padStart(2, '0')}
          </p>
            <br />
            <h2 className="text-lg font-semibold text-gray-700 dark:text-white">{`Question ${question.id}`}</h2>
            <p className="mt-2 text-sm text-gray-600 dark:text-gray-400">{question.question}</p>
            <div className="mt-4 space-y-2">
              {question.options.map((option, index) => (
                <label
                  key={index}
                  className={`block bg-gray-200 text-left dark:bg-gray-700 rounded-md p-3 cursor-pointer ${
                    answerSubmitted
                      ? option === question.correctAnswer
                        ? 'bg-green-300'
                        : selectedOptions[questionIndex] === option
                        ? 'bg-red-300'
                        : ''
                      : ''
                  }`}
                >
                  <input
                    type="radio"
                    className="mr-2"
                    value={option}
                    checked={option === selectedOptions[questionIndex]}
                    onChange={() => handleOptionChange(option)}
                    disabled={answerSubmitted}
                  />
                  {option}
                </label>
              ))}
            </div>
            {answerSubmitted && (
              <div className={`mt-4 ${isCorrectAnswers[questionIndex] ? 'text-green-600' : 'text-red-600'}`}>
                {isCorrectAnswers[questionIndex]
                  ? 'Correct!'
                  : `Wrong! The correct answer is: ${question.correctAnswer}`}
              </div>
            )}
            <div className="flex justify-between mt-6 space-x-4">
              <button
                onClick={handleSubmitAnswer}
                className={`px-4 py-2 text-sm font-medium text-white bg-indigo-600 rounded-md hover:bg-indigo-500 focus:outline-none focus:bg-indigo-500 ${
                  selectedOptions[questionIndex] === null ? ' opacity-50 cursor-not-allowed' : ''
                }`}
                disabled={answerSubmitted || selectedOptions[questionIndex] === null}
              >
                Submit
              </button>
            </div>
            
          </div>
        ) : (
          // Display final result after all questions are answered
          <div className="flex flex-col p-6 bg-white rounded-lg shadow-md dark:bg-gray-800">
            <h1 className="mb-4 text-2xl font-bold text-center text-gray-700 dark:text-white">Quiz Completed!</h1>
            <p className="text-lg font-semibold text-gray-700 dark:text-white">{`Your Score: ${score}/${data.length}`}</p>
            <div className="mt-4 space-y-2">
              {data.map((q, index) => (
                <div key={index} className={`text-lg ${isCorrectAnswers[index] ? 'text-green-600' : 'text-red-600'}`}>
                  {`Question ${q.id}: ${
                    isCorrectAnswers[index]
                      ? 'Correct!'
                      : `Wrong! The correct answer is: ${q.correctAnswer}`
                  }`}
                </div>
              ))}
            </div>
          </div>
        )}
        <br />
        <Link to="/detailspage">
          <button className="px-6 py-3 text-sm font-medium text-white bg-indigo-600 rounded-md hover:bg-indigo-500 focus:outline-none focus:bg-indigo-500">
            Back To Classroom
          </button>
        </Link>
      </div>
    </div>
    
  );
}


